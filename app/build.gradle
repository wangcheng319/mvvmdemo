apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


apply from: 'tinker.gradle'

def app = rootProject.ext.android
def config = rootProject.ext.app
def dep = rootProject.ext.dep

def currentVersionCode = getVersionCode()

def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))
}


android {
    compileSdkVersion app.compileSdkVersion
    buildToolsVersion = app.compileSdkVersion
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode currentVersionCode
        versionName config.versionName

        multiDexEnabled true

        ndk {
            // Filter for architectures supported by Flutter.
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86'
        }
        signingConfig signingConfigs.debug

        //ARouter
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }

        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }

    signingConfigs {
        release {
            storeFile file('../ks/client_key.keystore')//keystore的路径
            storePassword 'chengmivico'
            keyAlias 'chengmidev'
            keyPassword 'chengmivico'
        }
        debug {
            storeFile file('../ks/client_key.keystore')//keystore的路径
            storePassword 'chengmivico'
            keyAlias 'chengmidev'
            keyPassword 'chengmivico'
        }

        preview {
            storeFile file('../ks/client_key.keystore')//keystore的路径
            storePassword 'chengmivico'
            keyAlias 'chengmidev'
            keyPassword 'chengmivico'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            buildConfigField "String", "BASE_URL", '"https://dev.example.com/implementation"'
            buildConfigField "String", "APP_KEY", '"xxxxxx"'
        }

        release {
            minifyEnabled true
            applicationIdSuffix ".prod"
            buildConfigField "String", "BASE_URL", '"https://prod.example.com/implementation"'
            buildConfigField "String", "APP_KEY", '"xxxxxx"'
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release

        }

        pre.initWith(release)
        pre {
            applicationIdSuffix ".pre"
            buildConfigField "String", "BASE_URL", '"https://pre.example.com/implementation"'
            matchingFallbacks = ['pre', 'debug', 'release']
        }
    }

    dataBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

//    android.applicationVariants.all {
//        variant ->
//            variant.outputs.all {
//                //在这里修改apk文件名，引号内的字符串都可以随便定义
//                outputFileName = "${variant.name}-v${variant.versionName}-${variant.versionCode}-${releaseTime()}.apk"
//            }
//    }

}

// 获取版本号
def getVersionCode() {
    def versionFile = file('version.properties')// 读取第一步新建的文件
    if (versionFile.canRead()) {// 判断文件读取异常
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()// 读取文件里面的版本号
        def runTasks = gradle.startParameter.taskNames
        // 版本号自增之后再写入文件（此处是关键，版本号自增+1）
        versionProps['VERSION_CODE'] = (++versionCode).toString()
        versionProps.store(versionFile.newWriter(), null)
        return versionCode // 返回自增之后的版本号
    }
}


dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0-alpha03"
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha03'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.squareup.retrofit2:converter-scalars:2.5.0'

    implementation 'org.litepal.android:kotlin:3.0.0'


    //kotlin 相关
    implementation dep.kotlin

    //anko
    implementation dep.anko_commons
    implementation dep.anko_layout
    implementation dep.anko_layout_appcompat
    implementation dep.anko_layout_coroutine
    implementation dep.anko_layout_app_coroutine

    //rx
    implementation dep.rxjava
    implementation dep.rxandroid

    implementation dep.rxbinding_core
    implementation dep.rxbinding_appcompat

    //event bus
    implementation dep.event_bus

    //viewmodel and lifecycle
    implementation dep.livedata
    implementation dep.viewmodel
    implementation dep.lifecycle_extensions
    implementation dep.fragment_ktx
    implementation dep.rxLifecycle
    implementation dep.rxLifecycle_components

    //retrofit
    implementation dep.retrofit
    implementation dep.retrofit_json
    implementation dep.retrofit_rxjava
    implementation dep.okhttp_intercepte

    //viewpager2
    implementation dep.viewpager2

    //glide
    implementation dep.glide

    //logger
    implementation dep.orhanobut_logger

    //autosize
    implementation dep.autosize
    implementation dep.progressmanager
    //qmui
    implementation dep.qmui

    //recyclerview
    implementation dep.base_recyclerview


    //camerax
    def camerax_version = '1.0.0-alpha06'
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"

    //arouter
    api 'com.alibaba:arouter-api:1.5.0'
    kapt 'com.alibaba:arouter-compiler:1.2.2'

    implementation 'com.tencent:mmkv-static:1.1.1'

    //bugly
    implementation "com.android.support:multidex:1.0.1" // 多dex配置
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.6'
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.9'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本

    if (isModule.toBoolean()) {
        implementation project(path: ':common')
        implementation project(path: ':module_main')
        implementation project(path: ':module_account')
    }
}
