apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def app = rootProject.ext.android
def config = rootProject.ext.app
def dep = rootProject.ext.dep

android {
    compileSdkVersion app.compileSdkVersion
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        multiDexEnabled true

        ndk {
            // Filter for architectures supported by Flutter.
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    signingConfigs {
        release {
            storeFile file('E:/mvvmdemo/ks/client_key.keystore')//keystore的路径
            storePassword 'chengmivico'
            keyAlias 'chengmidev'
            keyPassword 'chengmivico'
        }
        debug {
            storeFile file('E:/mvvmdemo/ks/client_key.keystore')//keystore的路径
            storePassword 'chengmivico'
            keyAlias 'chengmidev'
            keyPassword 'chengmivico'
        }

        preview {
            storeFile file('E:/mvvmdemo/ks/client_key.keystore')//keystore的路径
            storePassword 'chengmivico'
            keyAlias 'chengmidev'
            keyPassword 'chengmivico'
        }
    }

    buildTypes {
        debug {
            // applicationId添加后缀
            //比如defaultConfig中设置的applicationId为com.example.myapp
            //编译debug版本时applicationId将是com.example.myapp.dev
            applicationIdSuffix ".dev"

            //开发服务器地址
            buildConfigField "String", "BASE_URL", '"https://dev.example.com/implementation"'
            buildConfigField "String", "APP_KEY", '"xxxxxx"'
        }

        release {
            applicationIdSuffix ".prod"
            //生产服务器地址
            buildConfigField "String", "BASE_URL", '"https://prod.example.com/implementation"'
            buildConfigField "String", "APP_KEY", '"xxxxxx"'
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }


        //预生产版本
        /* 从给定的构建类型复制所有属性 */
        pre.initWith(release)
        pre {
            applicationIdSuffix ".pre"
            buildConfigField "String", "BASE_URL", '"https://pre.example.com/implementation"'
            matchingFallbacks = ['pre', 'debug', 'release']
        }
    }

    dataBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0-alpha03"
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha03'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.squareup.retrofit2:converter-scalars:2.5.0'

    implementation 'org.litepal.android:kotlin:3.0.0'


    //kotlin 相关
    implementation dep.kotlin

    //anko
    implementation dep.anko_commons
    implementation dep.anko_layout
    implementation dep.anko_layout_appcompat
    implementation dep.anko_layout_coroutine
    implementation dep.anko_layout_app_coroutine

    //rx
    implementation dep.rxjava
    implementation dep.rxandroid

    implementation dep.rxbinding_core
    implementation dep.rxbinding_appcompat

    //event bus
    implementation dep.event_bus

    //viewmodel and lifecycle
    implementation dep.livedata
    implementation dep.viewmodel
    implementation dep.lifecycle_extensions
    implementation dep.fragment_ktx
    implementation dep.rxLifecycle
    implementation dep.rxLifecycle_components

    //retrofit
    implementation dep.retrofit
    implementation dep.retrofit_json
    implementation dep.retrofit_rxjava
    implementation dep.okhttp_intercepte

    //viewpager2
    implementation dep.viewpager2

    //glide
    implementation dep.glide

    //logger
    implementation dep.orhanobut_logger

    //autosize
    implementation dep.autosize
    implementation dep.progressmanager
    //qmui
    implementation dep.qmui
    implementation project(':flutter')

}
